/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mx.com.cuervo.rutas.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import mx.com.cuervo.rutas.model.Parada;
import mx.com.cuervo.rutas.model.ParadaModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Parada service. Represents a row in the &quot;C_Parada&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ParadaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParadaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ParadaImpl
 * @generated
 */
@ProviderType
public class ParadaModelImpl
	extends BaseModelImpl<Parada> implements ParadaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a parada model instance should use the <code>Parada</code> interface instead.
	 */
	public static final String TABLE_NAME = "C_Parada";

	public static final Object[][] TABLE_COLUMNS = {
		{"paradaId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"nombreParada", Types.VARCHAR},
		{"descripcion", Types.VARCHAR}, {"horario", Types.VARCHAR},
		{"rutaId", Types.BIGINT}, {"nombreCarpeta", Types.VARCHAR},
		{"nombreArchivo", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("paradaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nombreParada", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descripcion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("horario", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rutaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombreCarpeta", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nombreArchivo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table C_Parada (paradaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nombreParada VARCHAR(75) null,descripcion VARCHAR(75) null,horario VARCHAR(75) null,rutaId LONG,nombreCarpeta VARCHAR(75) null,nombreArchivo VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table C_Parada";

	public static final String ORDER_BY_JPQL = " ORDER BY parada.paradaId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY C_Parada.paradaId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long RUTAID_COLUMN_BITMASK = 2L;

	public static final long PARADAID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ParadaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _paradaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParadaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _paradaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Parada.class;
	}

	@Override
	public String getModelClassName() {
		return Parada.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Parada, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Parada, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parada, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Parada)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Parada, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Parada, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Parada)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Parada, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Parada, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Parada>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Parada.class.getClassLoader(), Parada.class, ModelWrapper.class);

		try {
			Constructor<Parada> constructor =
				(Constructor<Parada>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Parada, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Parada, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Parada, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Parada, Object>>();
		Map<String, BiConsumer<Parada, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Parada, ?>>();

		attributeGetterFunctions.put("paradaId", Parada::getParadaId);
		attributeSetterBiConsumers.put(
			"paradaId", (BiConsumer<Parada, Long>)Parada::setParadaId);
		attributeGetterFunctions.put("groupId", Parada::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Parada, Long>)Parada::setGroupId);
		attributeGetterFunctions.put("companyId", Parada::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Parada, Long>)Parada::setCompanyId);
		attributeGetterFunctions.put("userId", Parada::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Parada, Long>)Parada::setUserId);
		attributeGetterFunctions.put("userName", Parada::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Parada, String>)Parada::setUserName);
		attributeGetterFunctions.put("createDate", Parada::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Parada, Date>)Parada::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Parada::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Parada, Date>)Parada::setModifiedDate);
		attributeGetterFunctions.put("nombreParada", Parada::getNombreParada);
		attributeSetterBiConsumers.put(
			"nombreParada",
			(BiConsumer<Parada, String>)Parada::setNombreParada);
		attributeGetterFunctions.put("descripcion", Parada::getDescripcion);
		attributeSetterBiConsumers.put(
			"descripcion", (BiConsumer<Parada, String>)Parada::setDescripcion);
		attributeGetterFunctions.put("horario", Parada::getHorario);
		attributeSetterBiConsumers.put(
			"horario", (BiConsumer<Parada, String>)Parada::setHorario);
		attributeGetterFunctions.put("rutaId", Parada::getRutaId);
		attributeSetterBiConsumers.put(
			"rutaId", (BiConsumer<Parada, Long>)Parada::setRutaId);
		attributeGetterFunctions.put("nombreCarpeta", Parada::getNombreCarpeta);
		attributeSetterBiConsumers.put(
			"nombreCarpeta",
			(BiConsumer<Parada, String>)Parada::setNombreCarpeta);
		attributeGetterFunctions.put("nombreArchivo", Parada::getNombreArchivo);
		attributeSetterBiConsumers.put(
			"nombreArchivo",
			(BiConsumer<Parada, String>)Parada::setNombreArchivo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getParadaId() {
		return _paradaId;
	}

	@Override
	public void setParadaId(long paradaId) {
		_paradaId = paradaId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getNombreParada() {
		if (_nombreParada == null) {
			return "";
		}
		else {
			return _nombreParada;
		}
	}

	@Override
	public void setNombreParada(String nombreParada) {
		_nombreParada = nombreParada;
	}

	@Override
	public String getDescripcion() {
		if (_descripcion == null) {
			return "";
		}
		else {
			return _descripcion;
		}
	}

	@Override
	public void setDescripcion(String descripcion) {
		_descripcion = descripcion;
	}

	@Override
	public String getHorario() {
		if (_horario == null) {
			return "";
		}
		else {
			return _horario;
		}
	}

	@Override
	public void setHorario(String horario) {
		_horario = horario;
	}

	@Override
	public long getRutaId() {
		return _rutaId;
	}

	@Override
	public void setRutaId(long rutaId) {
		_columnBitmask |= RUTAID_COLUMN_BITMASK;

		if (!_setOriginalRutaId) {
			_setOriginalRutaId = true;

			_originalRutaId = _rutaId;
		}

		_rutaId = rutaId;
	}

	public long getOriginalRutaId() {
		return _originalRutaId;
	}

	@Override
	public String getNombreCarpeta() {
		if (_nombreCarpeta == null) {
			return "";
		}
		else {
			return _nombreCarpeta;
		}
	}

	@Override
	public void setNombreCarpeta(String nombreCarpeta) {
		_nombreCarpeta = nombreCarpeta;
	}

	@Override
	public String getNombreArchivo() {
		if (_nombreArchivo == null) {
			return "";
		}
		else {
			return _nombreArchivo;
		}
	}

	@Override
	public void setNombreArchivo(String nombreArchivo) {
		_nombreArchivo = nombreArchivo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Parada.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Parada toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Parada>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParadaImpl paradaImpl = new ParadaImpl();

		paradaImpl.setParadaId(getParadaId());
		paradaImpl.setGroupId(getGroupId());
		paradaImpl.setCompanyId(getCompanyId());
		paradaImpl.setUserId(getUserId());
		paradaImpl.setUserName(getUserName());
		paradaImpl.setCreateDate(getCreateDate());
		paradaImpl.setModifiedDate(getModifiedDate());
		paradaImpl.setNombreParada(getNombreParada());
		paradaImpl.setDescripcion(getDescripcion());
		paradaImpl.setHorario(getHorario());
		paradaImpl.setRutaId(getRutaId());
		paradaImpl.setNombreCarpeta(getNombreCarpeta());
		paradaImpl.setNombreArchivo(getNombreArchivo());

		paradaImpl.resetOriginalValues();

		return paradaImpl;
	}

	@Override
	public int compareTo(Parada parada) {
		long primaryKey = parada.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Parada)) {
			return false;
		}

		Parada parada = (Parada)obj;

		long primaryKey = parada.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ParadaModelImpl paradaModelImpl = this;

		paradaModelImpl._originalGroupId = paradaModelImpl._groupId;

		paradaModelImpl._setOriginalGroupId = false;

		paradaModelImpl._setModifiedDate = false;

		paradaModelImpl._originalRutaId = paradaModelImpl._rutaId;

		paradaModelImpl._setOriginalRutaId = false;

		paradaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Parada> toCacheModel() {
		ParadaCacheModel paradaCacheModel = new ParadaCacheModel();

		paradaCacheModel.paradaId = getParadaId();

		paradaCacheModel.groupId = getGroupId();

		paradaCacheModel.companyId = getCompanyId();

		paradaCacheModel.userId = getUserId();

		paradaCacheModel.userName = getUserName();

		String userName = paradaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			paradaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			paradaCacheModel.createDate = createDate.getTime();
		}
		else {
			paradaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			paradaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			paradaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		paradaCacheModel.nombreParada = getNombreParada();

		String nombreParada = paradaCacheModel.nombreParada;

		if ((nombreParada != null) && (nombreParada.length() == 0)) {
			paradaCacheModel.nombreParada = null;
		}

		paradaCacheModel.descripcion = getDescripcion();

		String descripcion = paradaCacheModel.descripcion;

		if ((descripcion != null) && (descripcion.length() == 0)) {
			paradaCacheModel.descripcion = null;
		}

		paradaCacheModel.horario = getHorario();

		String horario = paradaCacheModel.horario;

		if ((horario != null) && (horario.length() == 0)) {
			paradaCacheModel.horario = null;
		}

		paradaCacheModel.rutaId = getRutaId();

		paradaCacheModel.nombreCarpeta = getNombreCarpeta();

		String nombreCarpeta = paradaCacheModel.nombreCarpeta;

		if ((nombreCarpeta != null) && (nombreCarpeta.length() == 0)) {
			paradaCacheModel.nombreCarpeta = null;
		}

		paradaCacheModel.nombreArchivo = getNombreArchivo();

		String nombreArchivo = paradaCacheModel.nombreArchivo;

		if ((nombreArchivo != null) && (nombreArchivo.length() == 0)) {
			paradaCacheModel.nombreArchivo = null;
		}

		return paradaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Parada, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Parada, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parada, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Parada)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Parada, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Parada, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parada, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Parada)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Parada>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _paradaId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nombreParada;
	private String _descripcion;
	private String _horario;
	private long _rutaId;
	private long _originalRutaId;
	private boolean _setOriginalRutaId;
	private String _nombreCarpeta;
	private String _nombreArchivo;
	private long _columnBitmask;
	private Parada _escapedModel;

}